[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "pdm-wheel"
dynamic = ["version"]
description = "PDM plugin that save your requirements as wheels, similar to pip-wheel"
authors = [{ name = "Gabriel Dugny", email = "pdm-wheel@dugny.me" }]
dependencies = []
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]

[project.urls]
"Homepage" = "https://github.com/GabDug/pdm-wheel"
"Changelog" = "https://github.com/GabDug/pdm-wheel/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/GabDug/pdm-wheel/issues"

[project.entry-points.pdm]
pdm-wheel = "pdm_wheel:register_pdm_plugin"


[project.optional-dependencies]
pdm = ["pdm>=2.7.4"]

[tool.pdm]
plugins = ["sync-pre-commit-lock", "-e ."]
[tool.pdm.version]
source = "scm"
write_to = "pdm_wheel/_version.py"
write_template = "__version__: str = \"{}\"\n"

[tool.pdm.build]
package-dir = "src"
includes = ["src", "src/pdm_wheel"]
excludes = [
    "tests/.*",
    "tests/build",
    "tests/fixtures/.*",
    "tests/fixtures/wheels",
    ".venv",
    ".pdm-python",
]

[tool.pdm.scripts]
fmt = {cmd="black .", help="Run black formatter"}
test = "pytest"
test-cov = {cmd="pytest --junitxml=junit/test-results.xml --cov --cov-report=xml --cov-report=html --cov-report=term-missing", help="Run tests with coverage"}
doc = {shell = "cd docs && mkdocs serve", help = "Start the dev server for doc preview"}
lint = "pre-commit run --all-files"
lint-mypy = {cmd="mypy src", help="Run mypy type checker"}
lint-ruff = {cmd="ruff .", help="Run ruff linter"}

[tool.pdm.dev-dependencies]
dev = [
    "black>=22.10.0",
    "mypy>=1.4",
    "pylint>=2.15.4",
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "pdm>=2.4.0",
    "ruff>=0.0.270",
    "parver>=0.4",
    "ipdb>=0.13.13",
]
docs = [
    "mkdocs>=1.4.1",
    "mkdocs-material>=8.5.6",
    "mkdocstrings[python]>=0.19.0",
    "mkdocs-htmlproofer-plugin>=0.10.0",
    "mkdocs-gen-files>=0.4.0",
    "mkdocs-literate-nav>=0.5.0",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocs-include-markdown-plugin>=3.9.1",
]


[tool.ruff]
exclude = [".git", "tests/fixtures/*", "env", "dist", "build", "__pypackages__"]
extend-ignore = ["S101", "E501"]
line-length = 140
extend-select = [
    "E",
    "F",
    "W",
    "TCH",
    "I",
    "Q000",
    "TCH",
    "I001",
    "S",
    "T",
    "PTH",
    "PYI",
    "RET",
    "D209",
    "D202",
    "EM101",
]


[tool.mypy]
files = ["src"]
strict = true


[tool.black]
line-length = 120
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/fixtures
)/
'''


[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
norecursedirs = "*.egg .eggs dist build docs .tox .git __pycache__ node_modules .venv __pypackages__"

[tool.coverage.run]
branch = true
include = ["src/*"]
omit = ["*/tests/*"]

[tool.coverage.report]
fail_under = 88.0

exclude_lines = [
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod]',
    "except ImportError:",
    "# nocov",
]
